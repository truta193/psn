<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3_CB17"/>
    <a name="downloadFrequency" val="2.0"/>
    <a name="simulationFrequency" val="1.0"/>
    <boardmap boardname="BASYS3_CB17">
      <mc key="/CLK" map="321,237"/>
      <mc key="/IS_LEFT" map="92,295"/>
      <mc key="/OUTNR" pmap="649_295_0,612_295_0,577_295_0,538_295_0,499_295_0,465_295_0,425_295_0,389_295_0,353_295_0,315_295_0,278_295_0,u,u,u,u,u"/>
      <mc key="/PCLK" map="527,86"/>
      <mc key="/PDATA" map="544,104"/>
      <mc key="/RESET" map="78,323"/>
      <mc key="/REVERSE" map="117,323"/>
    </boardmap>
    <comp lib="0" loc="(110,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="CLK"/>
    </comp>
    <comp lib="0" loc="(110,170)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="RESET"/>
    </comp>
    <comp lib="0" loc="(110,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="REVERSE"/>
    </comp>
    <comp lib="0" loc="(140,50)" name="Clock">
      <a name="facing" val="south"/>
    </comp>
    <comp lib="0" loc="(1670,860)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(210,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PCLK"/>
    </comp>
    <comp lib="0" loc="(210,450)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PDATA"/>
    </comp>
    <comp lib="0" loc="(230,620)" name="Constant"/>
    <comp lib="0" loc="(240,590)" name="Clock"/>
    <comp lib="0" loc="(310,210)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(310,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(370,860)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(640,940)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(710,1080)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(710,80)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="IS_LEFT"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(940,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="OUTNR"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(980,590)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ANODES"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="5" loc="(1770,800)" name="7-Segment Display">
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="5" loc="(810,1020)" name="7-Segment Display"/>
    <comp loc="(1070,730)" name="PRIORITY_ENCODER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1070,860)" name="DIGIT_SPLITTER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1410,860)" name="MUX4TO1">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1670,860)" name="BCD7SGT">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(430,390)" name="PS2_READER">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ps2_reader_1"/>
    </comp>
    <comp loc="(510,590)" name="FREQUENCY_DIVIDER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(600,150)" name="CONTROL_UNIT">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="control_unit_1"/>
    </comp>
    <comp loc="(640,940)" name="SSD_MANAGER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(800,590)" name="RING_SHIFTER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(940,150)" name="COUNTER">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_1"/>
    </comp>
    <wire from="(1070,730)" to="(1110,730)"/>
    <wire from="(1070,860)" to="(1190,860)"/>
    <wire from="(1070,880)" to="(1190,880)"/>
    <wire from="(1070,900)" to="(1190,900)"/>
    <wire from="(1070,920)" to="(1190,920)"/>
    <wire from="(110,150)" to="(190,150)"/>
    <wire from="(110,170)" to="(160,170)"/>
    <wire from="(110,190)" to="(380,190)"/>
    <wire from="(1110,730)" to="(1110,940)"/>
    <wire from="(1110,940)" to="(1190,940)"/>
    <wire from="(140,50)" to="(140,60)"/>
    <wire from="(1410,860)" to="(1450,860)"/>
    <wire from="(160,170)" to="(160,410)"/>
    <wire from="(160,170)" to="(360,170)"/>
    <wire from="(160,410)" to="(210,410)"/>
    <wire from="(1690,790)" to="(1720,790)"/>
    <wire from="(1690,800)" to="(1730,800)"/>
    <wire from="(1690,810)" to="(1710,810)"/>
    <wire from="(1690,820)" to="(1720,820)"/>
    <wire from="(1690,830)" to="(1730,830)"/>
    <wire from="(1690,840)" to="(1740,840)"/>
    <wire from="(1690,850)" to="(1750,850)"/>
    <wire from="(1710,810)" to="(1710,890)"/>
    <wire from="(1710,890)" to="(1770,890)"/>
    <wire from="(1720,760)" to="(1720,790)"/>
    <wire from="(1720,760)" to="(1770,760)"/>
    <wire from="(1720,820)" to="(1720,880)"/>
    <wire from="(1720,880)" to="(1780,880)"/>
    <wire from="(1730,770)" to="(1730,800)"/>
    <wire from="(1730,770)" to="(1780,770)"/>
    <wire from="(1730,830)" to="(1730,870)"/>
    <wire from="(1730,870)" to="(1790,870)"/>
    <wire from="(1740,780)" to="(1740,840)"/>
    <wire from="(1740,780)" to="(1800,780)"/>
    <wire from="(1750,790)" to="(1750,850)"/>
    <wire from="(1750,790)" to="(1790,790)"/>
    <wire from="(1770,760)" to="(1770,800)"/>
    <wire from="(1770,860)" to="(1770,890)"/>
    <wire from="(1780,770)" to="(1780,800)"/>
    <wire from="(1780,860)" to="(1780,880)"/>
    <wire from="(1790,790)" to="(1790,800)"/>
    <wire from="(1790,860)" to="(1790,870)"/>
    <wire from="(1800,780)" to="(1800,800)"/>
    <wire from="(190,150)" to="(190,390)"/>
    <wire from="(190,150)" to="(340,150)"/>
    <wire from="(190,390)" to="(210,390)"/>
    <wire from="(230,620)" to="(240,620)"/>
    <wire from="(240,590)" to="(260,590)"/>
    <wire from="(240,620)" to="(240,960)"/>
    <wire from="(240,620)" to="(280,620)"/>
    <wire from="(240,960)" to="(420,960)"/>
    <wire from="(260,590)" to="(260,940)"/>
    <wire from="(260,590)" to="(280,590)"/>
    <wire from="(260,940)" to="(420,940)"/>
    <wire from="(280,560)" to="(280,590)"/>
    <wire from="(280,560)" to="(580,560)"/>
    <wire from="(280,590)" to="(290,590)"/>
    <wire from="(280,620)" to="(280,650)"/>
    <wire from="(280,620)" to="(290,620)"/>
    <wire from="(280,650)" to="(570,650)"/>
    <wire from="(290,610)" to="(290,620)"/>
    <wire from="(340,110)" to="(340,150)"/>
    <wire from="(340,110)" to="(690,110)"/>
    <wire from="(340,150)" to="(380,150)"/>
    <wire from="(350,210)" to="(350,300)"/>
    <wire from="(350,210)" to="(380,210)"/>
    <wire from="(350,300)" to="(460,300)"/>
    <wire from="(360,130)" to="(360,170)"/>
    <wire from="(360,130)" to="(680,130)"/>
    <wire from="(360,170)" to="(380,170)"/>
    <wire from="(370,230)" to="(370,280)"/>
    <wire from="(370,230)" to="(380,230)"/>
    <wire from="(370,280)" to="(480,280)"/>
    <wire from="(370,860)" to="(400,860)"/>
    <wire from="(400,860)" to="(400,980)"/>
    <wire from="(400,860)" to="(850,860)"/>
    <wire from="(400,980)" to="(420,980)"/>
    <wire from="(430,390)" to="(460,390)"/>
    <wire from="(430,410)" to="(480,410)"/>
    <wire from="(460,300)" to="(460,390)"/>
    <wire from="(480,280)" to="(480,410)"/>
    <wire from="(510,590)" to="(540,590)"/>
    <wire from="(570,610)" to="(570,650)"/>
    <wire from="(570,610)" to="(580,610)"/>
    <wire from="(580,560)" to="(580,590)"/>
    <wire from="(600,170)" to="(660,170)"/>
    <wire from="(600,190)" to="(640,190)"/>
    <wire from="(600,80)" to="(600,150)"/>
    <wire from="(600,80)" to="(710,80)"/>
    <wire from="(640,1080)" to="(710,1080)"/>
    <wire from="(640,190)" to="(640,210)"/>
    <wire from="(640,210)" to="(720,210)"/>
    <wire from="(640,960)" to="(640,1080)"/>
    <wire from="(660,170)" to="(660,190)"/>
    <wire from="(660,190)" to="(720,190)"/>
    <wire from="(680,130)" to="(680,170)"/>
    <wire from="(680,170)" to="(720,170)"/>
    <wire from="(690,110)" to="(690,150)"/>
    <wire from="(690,150)" to="(720,150)"/>
    <wire from="(730,1010)" to="(760,1010)"/>
    <wire from="(730,1020)" to="(770,1020)"/>
    <wire from="(730,1030)" to="(750,1030)"/>
    <wire from="(730,1040)" to="(760,1040)"/>
    <wire from="(730,1050)" to="(770,1050)"/>
    <wire from="(730,1060)" to="(780,1060)"/>
    <wire from="(730,1070)" to="(790,1070)"/>
    <wire from="(750,1030)" to="(750,1110)"/>
    <wire from="(750,1110)" to="(810,1110)"/>
    <wire from="(760,1040)" to="(760,1100)"/>
    <wire from="(760,1100)" to="(820,1100)"/>
    <wire from="(760,980)" to="(760,1010)"/>
    <wire from="(760,980)" to="(810,980)"/>
    <wire from="(770,1050)" to="(770,1090)"/>
    <wire from="(770,1090)" to="(830,1090)"/>
    <wire from="(770,990)" to="(770,1020)"/>
    <wire from="(770,990)" to="(820,990)"/>
    <wire from="(780,1000)" to="(780,1060)"/>
    <wire from="(780,1000)" to="(840,1000)"/>
    <wire from="(790,1010)" to="(790,1070)"/>
    <wire from="(790,1010)" to="(830,1010)"/>
    <wire from="(800,590)" to="(850,590)"/>
    <wire from="(810,1080)" to="(810,1110)"/>
    <wire from="(810,980)" to="(810,1020)"/>
    <wire from="(820,1080)" to="(820,1100)"/>
    <wire from="(820,990)" to="(820,1020)"/>
    <wire from="(830,1010)" to="(830,1020)"/>
    <wire from="(830,1080)" to="(830,1090)"/>
    <wire from="(840,1000)" to="(840,1020)"/>
    <wire from="(850,590)" to="(850,730)"/>
    <wire from="(850,590)" to="(980,590)"/>
  </circuit>
  <vhdl name="PS2_READER">library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity PS2_READER is
	port (
		CLOCK : in std_logic;
		RESET : in std_logic;
		PS2_CLOCK : in std_logic;
		PS2_DATA : in std_logic;
		LEFT_CLICK : out std_logic;
		RIGHT_CLICK : out std_logic
	);
end PS2_READER;

architecture Behavioral of PS2_READER is
	signal MOUSE_REGISTER : std_logic_vector(42 downto 0) := (others =&gt; '0');
	--signal CLICK_COUNT : std_logic_vector(15 downto 0) := (others =&gt; '0');
	signal MOUSE_BITS : std_logic_vector(5 downto 0) := (others =&gt; '0');
	signal REGISTER_FULL : std_logic;
	signal IS_LEFT_PRESSED : std_logic := '0';
	signal IS_RIGHT_PRESSED : std_logic := '0';
 
begin
	BIT_COUNT_PROCESS : process (PS2_CLOCK, RESET)
	begin
		if RESET = '0' then
			MOUSE_BITS &lt;= (others =&gt; '0');
		elsif rising_edge(PS2_CLOCK) then
			if MOUSE_BITS &lt;= 42 then
				MOUSE_BITS &lt;= MOUSE_BITS + 1;
			else
				MOUSE_BITS &lt;= (others =&gt; '0');
			end if;
		end if;
	end process;

	REGISTER_PROCESS : process (PS2_CLOCK, RESET)
	begin
		REGISTER_FULL &lt;= '0';
		if RESET = '0' then
			MOUSE_REGISTER &lt;= (others =&gt; '0');
		elsif falling_edge(PS2_CLOCK) then
			MOUSE_REGISTER &lt;= MOUSE_REGISTER(41 downto 0) &amp; PS2_DATA;
			if MOUSE_BITS = 42 then
				REGISTER_FULL &lt;= '1';
			end if;
		end if;
	end process;

	SIGNAL_PROCESS: process (CLOCK)
	begin
		if rising_edge(CLOCK) then
			LEFT_CLICK &lt;= '0';
			RIGHT_CLICK &lt;= '0';
			if REGISTER_FULL = '1' then
				if MOUSE_REGISTER(41) = '1' and IS_LEFT_PRESSED = '0' then
					LEFT_CLICK &lt;= '1';
				elsif MOUSE_REGISTER(40) = '1' and IS_RIGHT_PRESSED = '0' then
					RIGHT_CLICK &lt;= '1';
				end if;
				IS_LEFT_PRESSED &lt;= MOUSE_REGISTER(41);
				IS_RIGHT_PRESSED &lt;= MOUSE_REGISTER(40);
			end if;	
		end if;
	end process;
--	COUNTER_PROCESS : process (CLOCK, RESET)
--	begin
--		if RESET = '0' then
--			CLICK_COUNT &lt;= (others =&gt; '0');
--		elsif rising_edge(CLOCK) then
--			if REGISTER_FULL = '1' then
--				if MOUSE_REGISTER(41) = '1' and IS_LEFT_PRESSED = '0' then
--					CLICK_COUNT &lt;= CLICK_COUNT + 1;
--				elsif MOUSE_REGISTER(40) = '1' and IS_RIGHT_PRESSED = '0' then
--					CLICK_COUNT &lt;= CLICK_COUNT - 1;
--				end if;
--				IS_LEFT_PRESSED &lt;= MOUSE_REGISTER(41);
--				IS_RIGHT_PRESSED &lt;= MOUSE_REGISTER(40);
--			end if;
--		end if;
--
--		TEST &lt;= CLICK_COUNT;
--	end process;
end Behavioral;














</vhdl>
  <vhdl name="COUNTER">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;&#13;

ENTITY COUNTER IS&#13;
  PORT (&#13;
  	CLOCK: in std_logic;
  	RESET: in std_logic;
  	INCREMENT, DECREMENT: in std_logic;
  	OUTNUMBER: out std_logic_vector(15 downto 0)
    );&#13;
END COUNTER;&#13;



ARCHITECTURE Behavioral OF COUNTER IS&#13;
&#13;signal NUMBER: std_logic_vector(15 downto 0) := (others =&gt; '0');
BEGIN&#13;
&#13;	CLOCK_ACTIVE: process (CLOCK, RESET)
	begin
		if RESET = '0' then
			NUMBER &lt;= (others =&gt; '0');
		elsif rising_edge(CLOCK) then
			if INCREMENT = '1' then
				if NUMBER &lt; 9999 then
					NUMBER &lt;= NUMBER + 1;
				else
					NUMBER &lt;= "0010011100001111"; --9999
				end if;
			elsif DECREMENT = '1' then
				if NUMBER &gt; 0 then
					NUMBER &lt;= NUMBER - 1;
				else 
					NUMBER &lt;= (others =&gt; '0');
				end if;
			end if;
		end if;
		OUTNUMBER &lt;= NUMBER;
	end process;
&#13;
END Behavioral;&#13;
</vhdl>
  <vhdl name="CONTROL_UNIT">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY CONTROL_UNIT IS&#13;
  PORT (&#13;
	CLOCK: in std_logic;
	RESET: in std_logic;
	REVERSE: in std_logic;
	LEFT_CLICK, RIGHT_CLICK: in std_logic;
	IS_LEFT, INC, DEC: out std_logic
    );&#13;
END CONTROL_UNIT;&#13;
&#13;
&#13;
ARCHITECTURE Behavioral OF CONTROL_UNIT IS&#13;
&#13;
BEGIN&#13;
&#13;	CONTROL_UNIT: process (CLOCK, RESET)
	begin
		if RESET = '0' then
			INC &lt;= '0';
			DEC &lt;= '0';
			IS_LEFT &lt;= '0';	
		elsif rising_edge(CLOCK) then
			INC &lt;= '0';
			DEC &lt;= '0';
			if REVERSE = '0' then
				IS_LEFT &lt;= '1';
				if LEFT_CLICK = '1' then
					INC &lt;= '1';
		
				elsif RIGHT_CLICK = '1' then
					DEC &lt;= '1';
					
				end if;
			else
				IS_LEFT &lt;= '0';
				if LEFT_CLICK = '1' then
					DEC &lt;= '1';
					
				elsif RIGHT_CLICK = '1' then
					INC &lt;= '1';
					
				end if;
				
			end if;
		end if;
	end process;
&#13;
END Behavioral;&#13;
</vhdl>
  <vhdl name="BCD7SGT">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY BCD7SGT IS
  PORT (
  	INPUT: in std_logic_vector(3 downto 0);
  	OUTPUT: out std_logic_vector(6 downto 0)
    );
END BCD7SGT;


ARCHITECTURE Behavioral OF BCD7SGT IS

BEGIN
	with INPUT select OUTPUT &lt;=
		"1111110" when "0000",
		"0110000" when "0001",
		"1101101" when "0010",
		"1111001" when "0011",
		"0110011" when "0100",
		"1011011" when "0101",
		"1011111" when "0110",
		"1110000" when "0111",
		"1111111" when "1000",
		"1111011" when "1001",
		"1110111" when "1010",
		"0011111" when "1011",
		"1001110" when "1100",
		"0111101" when "1101",
		"1001111" when "1110",
		"1000111" when "1111",
		"0000000" when others;
END Behavioral;
</vhdl>
  <vhdl name="RING_SHIFTER">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;&#13;

ENTITY RING_SHIFTER IS&#13;
  PORT (&#13;
	CLOCK: in std_logic;
	RESET: in std_logic;
	OUTPUT: out std_logic_vector(3 downto 0)
    );&#13;
END RING_SHIFTER;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF RING_SHIFTER IS&#13;
	signal CONTENT: std_logic_vector(3 downto 0) := "0001";&#13;
BEGIN&#13;
&#13;	CLOCK_SIGNAL: process (CLOCK)
	begin
		if RESET = '0' then
			CONTENT &lt;= "0001";
		elsif rising_edge(CLOCK) then
			CONTENT &lt;= CONTENT(0) &amp; CONTENT(3 downto 1);
		end if;
		OUTPUT &lt;= CONTENT;
	end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="MUX4TO1">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

ENTITY MUX4TO1 IS
  PORT (
	INPUT1: in std_logic_vector(3 downto 0);
	INPUT2: in std_logic_vector(3 downto 0);
	INPUT3: in std_logic_vector(3 downto 0);
	INPUT4: in std_logic_vector(3 downto 0);
	SELECTION: in std_logic_vector(1 downto 0);
	OUTPUT: out std_logic_vector(3 downto 0)
    );
END MUX4TO1;

ARCHITECTURE Behavioral OF MUX4TO1 IS
BEGIN

	OUTPUT &lt;= INPUT1 when SELECTION = "00" else
		INPUT2 when SELECTION = "01" else
	 	INPUT3 when SELECTION = "10" else 
	 	INPUT4 when SELECTION = "11";

END Behavioral;
</vhdl>
  <vhdl name="PRIORITY_ENCODER">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY PRIORITY_ENCODER IS
  PORT (
	INPUT: in std_logic_vector(3 downto 0);
	OUTPUT: out std_logic_vector(1 downto 0)
    );
END PRIORITY_ENCODER;


ARCHITECTURE Behavioral OF PRIORITY_ENCODER IS

BEGIN

	OUTPUT &lt;= "11" when INPUT(3) = '1' else
			"10" when INPUT(3 downto 2) = "01" else
			"01" when INPUT(3 downto 1) = "001" else
			"00" when INPUT(3 downto 0) = "0001";

END Behavioral;
</vhdl>
  <vhdl name="DIGIT_SPLITTER">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;&#13;
use ieee.numeric_std.all;

ENTITY DIGIT_SPLITTER IS&#13;
  PORT (&#13;
	NUMBER: in std_logic_vector(15 downto 0);
	D1, D2, D3, D4: out std_logic_vector(3 downto 0)
    );&#13;
END DIGIT_SPLITTER;&#13;
&#13;

ARCHITECTURE Behavioral OF DIGIT_SPLITTER IS&#13;

BEGIN&#13;
	SPLIT: process(NUMBER) 
	variable DECIMAL : integer := 0;
	variable N: integer := 0;
	begin
		N := conv_integer(NUMBER);
		DECIMAL := N rem 10;
		D1 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D2 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D3 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D4 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
	end process;
&#13;
END Behavioral;&#13;
</vhdl>
  <vhdl name="FREQUENCY_DIVIDER">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY FREQUENCY_DIVIDER IS
  PORT (
  	CLOCK_100: in std_logic;
  	RESET: in std_logic;
  	CLK_DIVIDED: out std_logic
	);
END FREQUENCY_DIVIDER;


ARCHITECTURE Behavioral OF FREQUENCY_DIVIDER IS

BEGIN

	process(CLOCK_100)
	variable nr: std_logic_vector (15 downto 0) := (others =&gt; '0');
	begin
		if RESET = '0' then
			nr := (others =&gt; '0');
		elsif rising_edge(CLOCK_100) then
			nr := nr + 1;
		end if;
		CLK_DIVIDED &lt;= nr(15);
	end process;

END Behavioral;
</vhdl>
  <vhdl name="SSD_MANAGER">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SSD_MANAGER IS&#13;
  PORT (&#13;
  	CLOCK: in std_logic;
  	RESET: in std_logic;
	NUMBER: in std_logic_vector(15 downto 0);
	ANODES: out std_logic_vector(3 downto 0);
	CATODES: out std_logic_vector(6 downto 0)
    );&#13;
END SSD_MANAGER;&#13;
&#13;

ARCHITECTURE Structural OF SSD_MANAGER IS&#13;
	&#13;COMPONENT FREQUENCY_DIVIDER IS
	  PORT (
	  	CLOCK_100: in std_logic;
	  	RESET: in std_logic;
	  	CLK_DIVIDED: out std_logic
		);
	END component;

	component RING_SHIFTER IS
	  PORT (
		CLOCK: in std_logic;
		RESET: in std_logic;
		OUTPUT: out std_logic_vector(3 downto 0)
	    );
	END component;

	component PRIORITY_ENCODER IS
		  PORT (
			INPUT: in std_logic_vector(3 downto 0);
			OUTPUT: out std_logic_vector(1 downto 0)
		    );
	END component;

	component DIGIT_SPLITTER IS
	  PORT (
		NUMBER: in std_logic_vector(15 downto 0);
		D1, D2, D3, D4: out std_logic_vector(3 downto 0)
	    );
	END component;

	component MUX4TO1 IS
	  PORT (
		INPUT1: in std_logic_vector(3 downto 0);
		INPUT2: in std_logic_vector(3 downto 0);
		INPUT3: in std_logic_vector(3 downto 0);
		INPUT4: in std_logic_vector(3 downto 0);
		SELECTION: in std_logic_vector(1 downto 0);
		OUTPUT: out std_logic_vector(3 downto 0)
	    );
	END component;

	component BCD7SGT IS
	  PORT (
	  	INPUT: in std_logic_vector(3 downto 0);
	  	OUTPUT: out std_logic_vector(6 downto 0)
	    );
	END component;

	signal CLOCK_DIVIDED: std_logic;
	signal ANODES_SIGNAL: std_logic_vector(3 downto 0);
	signal ANODE_SELECT: std_logic_vector(1 downto 0);
	signal DIGIT_SELECT: std_logic_vector(3 downto 0);
	signal DIGIT1, DIGIT2, DIGIT3, DIGIT4: std_logic_vector(3 downto 0);

BEGIN&#13;
&#13;
FREQ_DIV: FREQUENCY_DIVIDER port map(CLOCK, RESET, CLOCK_DIVIDED);
RING_SHIFT: RING_SHIFTER port map(CLOCK_DIVIDED, RESET, ANODES_SIGNAL);
ANODES &lt;= ANODES_SIGNAL;
PRIORITY_ENC: PRIORITY_ENCODER port map(ANODES_SIGNAL, ANODE_SELECT);
DIGIT_SPLT: DIGIT_SPLITTER port map(NUMBER, DIGIT1, DIGIT2, DIGIT3, DIGIT4);
&#13;MUX: MUX4TO1 port map(DIGIT1, DIGIT2, DIGIT3, DIGIT4, ANODE_SELECT, DIGIT_SELECT);
DIGIT_DEC: BCD7SGT port map(DIGIT_SELECT, CATODES);
END Structural;&#13;


-------------------------------------------------------
------------------ FREQUENCY DIVIDER ------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY FREQUENCY_DIVIDER IS
  PORT (
  	CLOCK_100: in std_logic;
  	RESET: in std_logic;
  	CLK_DIVIDED: out std_logic
	);
END FREQUENCY_DIVIDER;


ARCHITECTURE Behavioral OF FREQUENCY_DIVIDER IS

BEGIN

	process(CLOCK_100)
	variable nr: std_logic_vector (15 downto 0) := (others =&gt; '0');
	begin
		if RESET = '0' then
			nr := (others =&gt; '0');
		elsif rising_edge(CLOCK_100) then
			nr := nr + 1;
		end if;
		--CHANGE TO 15
		CLK_DIVIDED &lt;= nr(1);
	end process;

END Behavioral;


-------------------------------------------------------
--------------------- RING SHIFTER --------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

ENTITY RING_SHIFTER IS
  PORT (
	CLOCK: in std_logic;
	RESET: in std_logic;
	OUTPUT: out std_logic_vector(3 downto 0)
    );
END RING_SHIFTER;

ARCHITECTURE TypeArchitecture OF RING_SHIFTER IS
	signal CONTENT: std_logic_vector(3 downto 0) := "0001";
BEGIN

	CLOCK_SIGNAL: process (CLOCK)
	begin
		if RESET = '0' then
			CONTENT &lt;= "0001";
		elsif rising_edge(CLOCK) then
			CONTENT &lt;= CONTENT(0) &amp; CONTENT(3 downto 1);
		end if;
		OUTPUT &lt;= CONTENT;
	end process;

END TypeArchitecture;


-------------------------------------------------------
------------------- PROPRITY ENCODER ------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY PRIORITY_ENCODER IS
  PORT (
	INPUT: in std_logic_vector(3 downto 0);
	OUTPUT: out std_logic_vector(1 downto 0)
    );
END PRIORITY_ENCODER;

ARCHITECTURE Behavioral OF PRIORITY_ENCODER IS

BEGIN

	OUTPUT &lt;= "11" when INPUT(3) = '1' else
			"10" when INPUT(3 downto 2) = "01" else
			"01" when INPUT(3 downto 1) = "001" else
			"00" when INPUT(3 downto 0) = "0001";

END Behavioral;


-------------------------------------------------------
------------------- DIGIT_SPLITTER --------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

ENTITY DIGIT_SPLITTER IS
  PORT (
	NUMBER: in std_logic_vector(15 downto 0);
	D1, D2, D3, D4: out std_logic_vector(3 downto 0)
    );
END DIGIT_SPLITTER;


ARCHITECTURE Behavioral OF DIGIT_SPLITTER IS

BEGIN
	SPLIT: process(NUMBER) 
	variable DECIMAL : integer := 0;
	variable N: integer := 0;
	begin
		N := conv_integer(NUMBER);
		DECIMAL := N rem 10;
		D1 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D2 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D3 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
		N := N / 10;
		DECIMAL := N rem 10;
		D4 &lt;= std_logic_vector(to_unsigned(DECIMAL, 4));
	end process;

END Behavioral;


-------------------------------------------------------
------------------ MUX 4 TO 1 4BIT --------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

ENTITY MUX4TO1 IS
  PORT (
	INPUT1: in std_logic_vector(3 downto 0);
	INPUT2: in std_logic_vector(3 downto 0);
	INPUT3: in std_logic_vector(3 downto 0);
	INPUT4: in std_logic_vector(3 downto 0);
	SELECTION: in std_logic_vector(1 downto 0);
	OUTPUT: out std_logic_vector(3 downto 0)
    );
END MUX4TO1;

ARCHITECTURE Behavioral OF MUX4TO1 IS
BEGIN

	OUTPUT &lt;= INPUT1 when SELECTION = "00" else
		INPUT2 when SELECTION = "01" else
	 	INPUT3 when SELECTION = "10" else 
	 	INPUT4 when SELECTION = "11";

END Behavioral;



-------------------------------------------------------
------------------- BCD TO 7 SEGMENT ------------------
-------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY BCD7SGT IS
  PORT (
  	INPUT: in std_logic_vector(3 downto 0);
  	OUTPUT: out std_logic_vector(6 downto 0)
    );
END BCD7SGT;


ARCHITECTURE Behavioral OF BCD7SGT IS

BEGIN
	with INPUT select OUTPUT &lt;=
		"1111110" when "0000",
		"0110000" when "0001",
		"1101101" when "0010",
		"1111001" when "0011",
		"0110011" when "0100",
		"1011011" when "0101",
		"1011111" when "0110",
		"1110000" when "0111",
		"1111111" when "1000",
		"1111011" when "1001",
		"1110111" when "1010",
		"0011111" when "1011",
		"1001110" when "1100",
		"0111101" when "1101",
		"1001111" when "1110",
		"1000111" when "1111",
		"0000000" when others;
END Behavioral;


</vhdl>
</project>
