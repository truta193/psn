<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="downloadFrequency" val="2000000.0"/>
    <a name="simulationFrequency" val="2.0"/>
    <boardmap boardname="BASYS3">
      <mc key="/ANODE" pmap="130_234_0,273_234_0,225_234_0,180_234_0"/>
      <mc key="/CLK" map="321,237"/>
      <mc key="/CLK_OUT" map="649,295"/>
      <mc key="/INPT" pmap="647_323_0,609_323_0,571_323_0,535_323_0,497_323_0,456_323_0,417_323_0,382_323_0,341_323_0,305_323_0,268_323_0,228_323_0,192_323_0,154_323_0,117_323_0,78_323_0"/>
      <mc key="/RST" map="536,235"/>
      <mc key="/SSD" pmap="138_258_0,130_249_0,130_263_0,136_274_0,154_262_0,154_248_0,136_245_0"/>
    </boardmap>
    <comp lib="0" loc="(120,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="CLK"/>
    </comp>
    <comp lib="0" loc="(160,170)" name="Constant"/>
    <comp lib="0" loc="(190,350)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="RST"/>
    </comp>
    <comp lib="0" loc="(430,410)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="INPT"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(480,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="CLK_OUT"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(760,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ANODE"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(760,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="SSD"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp loc="(420,150)" name="divizor_f">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="divizor_f_1"/>
    </comp>
    <comp loc="(490,330)" name="ssd_controller">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_controller_1"/>
    </comp>
    <comp loc="(760,310)" name="ssd_decd">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_decd_1"/>
    </comp>
    <wire from="(120,150)" to="(120,220)"/>
    <wire from="(120,150)" to="(200,150)"/>
    <wire from="(160,170)" to="(200,170)"/>
    <wire from="(190,350)" to="(270,350)"/>
    <wire from="(270,300)" to="(270,330)"/>
    <wire from="(270,300)" to="(450,300)"/>
    <wire from="(420,150)" to="(450,150)"/>
    <wire from="(430,410)" to="(530,410)"/>
    <wire from="(450,150)" to="(450,300)"/>
    <wire from="(450,150)" to="(480,150)"/>
    <wire from="(450,300)" to="(540,300)"/>
    <wire from="(490,330)" to="(520,330)"/>
    <wire from="(490,350)" to="(510,350)"/>
    <wire from="(510,340)" to="(510,350)"/>
    <wire from="(510,340)" to="(530,340)"/>
    <wire from="(520,330)" to="(520,350)"/>
    <wire from="(520,350)" to="(540,350)"/>
    <wire from="(530,330)" to="(530,340)"/>
    <wire from="(530,330)" to="(540,330)"/>
    <wire from="(530,370)" to="(530,410)"/>
    <wire from="(530,370)" to="(540,370)"/>
    <wire from="(540,300)" to="(540,310)"/>
  </circuit>
  <vhdl name="ssd_controller">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
USE ieee.std_logic_unsigned.all;
&#13;
ENTITY ssd_controller IS&#13;
  PORT (&#13;
	REDUCED_CLK, RESET: in std_logic;
	ANODE: out std_logic_vector(1 downto 0);
	RESET_DECD: out std_logic
    );&#13;
END ssd_controller;&#13;

--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE comprtm OF ssd_controller IS&#13;
type STARE_T is (D0, D1, D2, D3);
signal STARE, NXSTARE : STARE_T;
BEGIN&#13;
&#13;	CTRL: process(REDUCED_CLK, RESET)
	begin
		if RESET = '1' then
			RESET_DECD &lt;= '1';
			STARE &lt;= D0;
		elsif rising_edge(REDUCED_CLK) then
			STARE &lt;= NXSTARE;
			RESET_DECD &lt;= '0';
		end if;
		
	end process CTRL;

	TRANZ: process(STARE)
	
	begin
		ANODE &lt;= "00";
		case STARE is
			when D0 =&gt; ANODE &lt;= "00"; NXSTARE &lt;= D1;
			when D1 =&gt; ANODE &lt;= "01"; NXSTARE &lt;= D2;
			when D2 =&gt; ANODE &lt;= "10"; NXSTARE &lt;= D3;
			when D3 =&gt; ANODE &lt;= "11"; NXSTARE &lt;= D0;
		end case;
	end process TRANZ;
	
&#13;
END comprtm;&#13;
</vhdl>
  <vhdl name="ssd_decd">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.std_logic_unsigned.all;&#13;
use ieee.numeric_std.all;

ENTITY ssd_decd IS&#13;
  PORT (&#13;
  	CLK, RESET: in std_logic;
	ANODE_IN :in std_logic_vector(1 downto 0);
	NR: in std_logic_vector(15 downto 0);
	ANODE_OUT : out std_logic_vector(3 downto 0);
	SSD_OUT: out std_logic_vector(6 downto 0)
    );&#13;
END ssd_decd;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE comportm OF ssd_decd IS&#13;
&#13;signal BIN_NR : std_logic_vector(3 downto 0);
BEGIN&#13;
&#13;	process(CLK, RESET)
	variable temp: integer;
	begin
--		BIN_NR &lt;= "0000";
--		ANODE_OUT &lt;= "0000";
		if RESET = '1' then		
			ANODE_OUT &lt;= "0000";
			SSD_OUT &lt;= "0000000";
		elsif rising_edge(CLK) then
			--Afisarea se face in hexa dar se poate modifica in zecimal daca trec la integer si tot iau ultima cifra
--			case ANODE_IN is
--				when "00" =&gt; BIN_NR &lt;= NR(3 downto 0); ANODE_OUT &lt;= "0001";
--				when "01" =&gt; BIN_NR &lt;= NR(7 downto 4); ANODE_OUT &lt;= "0010";
--				when "10" =&gt; BIN_NR &lt;= NR(11 downto 8); ANODE_OUT &lt;= "0100";
--				when "11" =&gt; BIN_NR &lt;= NR(15 downto 12); ANODE_OUT &lt;= "1000";
--				when others =&gt; ANODE_OUT &lt;= "0000";
--			end case;
			temp := conv_integer(NR);
			case ANODE_IN is
				when "00" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned(temp rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0001";
				when "01" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 10 ) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0010";
				when "10" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 100) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0100";
				when "11" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 1000) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "1000";
				when others =&gt; ANODE_OUT &lt;= "0000";
			end case;
			
			SSD_OUT &lt;= "0000000";
			case BIN_NR is
				when "0000" =&gt; SSD_OUT &lt;= "1111110";
				when "0001" =&gt; SSD_OUT &lt;= "0110000";
				when "0010" =&gt; SSD_OUT &lt;= "1101101";
				when "0011" =&gt; SSD_OUT &lt;= "1111001";
				when "0100" =&gt; SSD_OUT &lt;= "0110011";
				when "0101" =&gt; SSD_OUT &lt;= "1011011";
				when "0110" =&gt; SSD_OUT &lt;= "0011111";
				when "0111" =&gt; SSD_OUT &lt;= "1110000";
				when "1000" =&gt; SSD_OUT &lt;= "1111111";
				when "1001" =&gt; SSD_OUT &lt;= "1110011";
				when "1010" =&gt; SSD_OUT &lt;= "1110111";
				when "1011" =&gt; SSD_OUT &lt;= "0011111";
				when "1100" =&gt; SSD_OUT &lt;= "1001110";
				when "1101" =&gt; SSD_OUT &lt;= "0111101";
				when "1110" =&gt; SSD_OUT &lt;= "1001111";
				when "1111" =&gt; SSD_OUT &lt;= "1000111";
				when others =&gt; SSD_OUT &lt;= "0000000";
			end case;
		end if;
	end process;
&#13;
END comportm;&#13;
</vhdl>
  <vhdl name="divizor_f">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY divizor_f IS
  PORT (
  	CLK_100: in std_logic;
  	RST: in std_logic;
  	CLK_1: out std_logic
	);
END divizor_f;


ARCHITECTURE comportm OF divizor_f IS

BEGIN

	process(CLK_100)
	variable nr: std_logic_vector (10 downto 0) := (others =&gt; '0');
	begin
		if rising_edge(CLK_100) then
			if RST = '0' then
				nr := (others =&gt; '0');
			else
				nr := nr + 1;
			end if;
		end if;
		CLK_1 &lt;= nr(10);
	end process;

END comportm;
</vhdl>
  <vhdl name="bistabil_d">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY bistabil_d IS
  PORT (
	CLK: in std_logic;
	D, S, R: in std_logic;
	Q: out std_logic
    );
END bistabil_d;


ARCHITECTURE compr OF bistabil_d IS

BEGIN

	process(CLK)
	begin
		if rising_edge(CLK) then
			if (S = '0') then
				Q &lt;= '1';
			elsif (R = '0') then
				Q &lt;= '0';
			else 
				Q &lt;= D;
			end if;
		end if;
	end process;

END compr;
</vhdl>
</project>
